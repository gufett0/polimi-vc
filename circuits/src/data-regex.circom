pragma circom 2.1.5;

include "@zk-email/zk-regex-circom/circuits/regex_helpers.circom";

// regex: date:([A-Za-z]+), ([0-9]{1,2}) ([A-Za-z]+) ([0-9]{4}) ([0-9]{2}:[0-9]{2}:[0-9]{2}) ([+-][0-9]{4}) \(([a-zA-Z0-9_]+)\)
template DataRegex(msg_bytes) {
	signal input msg[msg_bytes];
	signal output out;

	var num_bytes = msg_bytes+1;
	signal in[num_bytes];
	in[0]<==255;
	for (var i = 0; i < msg_bytes; i++) {
		in[i+1] <== msg[i];
	}

	component eq[22][num_bytes];
	component lt[4][num_bytes];
	component and[42][num_bytes];
	component multi_or[8][num_bytes];
	signal states[num_bytes+1][37];
	signal states_tmp[num_bytes+1][37];
	signal from_zero_enabled[num_bytes+1];
	from_zero_enabled[num_bytes] <== 0;
	component state_changed[num_bytes];

	for (var i = 1; i < 37; i++) {
		states[0][i] <== 0;
	}

	for (var i = 0; i < num_bytes; i++) {
		state_changed[i] = MultiOR(36);
		states[i][0] <== 1;
		eq[0][i] = IsEqual();
		eq[0][i].in[0] <== in[i];
		eq[0][i].in[1] <== 100;
		and[0][i] = AND();
		and[0][i].a <== states[i][0];
		and[0][i].b <== eq[0][i].out;
		states_tmp[i+1][1] <== 0;
		eq[1][i] = IsEqual();
		eq[1][i].in[0] <== in[i];
		eq[1][i].in[1] <== 97;
		and[1][i] = AND();
		and[1][i].a <== states[i][1];
		and[1][i].b <== eq[1][i].out;
		states[i+1][2] <== and[1][i].out;
		eq[2][i] = IsEqual();
		eq[2][i].in[0] <== in[i];
		eq[2][i].in[1] <== 116;
		and[2][i] = AND();
		and[2][i].a <== states[i][2];
		and[2][i].b <== eq[2][i].out;
		states[i+1][3] <== and[2][i].out;
		eq[3][i] = IsEqual();
		eq[3][i].in[0] <== in[i];
		eq[3][i].in[1] <== 101;
		and[3][i] = AND();
		and[3][i].a <== states[i][3];
		and[3][i].b <== eq[3][i].out;
		states[i+1][4] <== and[3][i].out;
		eq[4][i] = IsEqual();
		eq[4][i].in[0] <== in[i];
		eq[4][i].in[1] <== 58;
		and[4][i] = AND();
		and[4][i].a <== states[i][4];
		and[4][i].b <== eq[4][i].out;
		states[i+1][5] <== and[4][i].out;
		lt[0][i] = LessEqThan(8);
		lt[0][i].in[0] <== 65;
		lt[0][i].in[1] <== in[i];
		lt[1][i] = LessEqThan(8);
		lt[1][i].in[0] <== in[i];
		lt[1][i].in[1] <== 90;
		and[5][i] = AND();
		and[5][i].a <== lt[0][i].out;
		and[5][i].b <== lt[1][i].out;
		lt[2][i] = LessEqThan(8);
		lt[2][i].in[0] <== 97;
		lt[2][i].in[1] <== in[i];
		lt[3][i] = LessEqThan(8);
		lt[3][i].in[0] <== in[i];
		lt[3][i].in[1] <== 122;
		and[6][i] = AND();
		and[6][i].a <== lt[2][i].out;
		and[6][i].b <== lt[3][i].out;
		and[7][i] = AND();
		and[7][i].a <== states[i][5];
		multi_or[0][i] = MultiOR(2);
		multi_or[0][i].in[0] <== and[5][i].out;
		multi_or[0][i].in[1] <== and[6][i].out;
		and[7][i].b <== multi_or[0][i].out;
		and[8][i] = AND();
		and[8][i].a <== states[i][6];
		and[8][i].b <== multi_or[0][i].out;
		multi_or[1][i] = MultiOR(2);
		multi_or[1][i].in[0] <== and[7][i].out;
		multi_or[1][i].in[1] <== and[8][i].out;
		states[i+1][6] <== multi_or[1][i].out;
		eq[5][i] = IsEqual();
		eq[5][i].in[0] <== in[i];
		eq[5][i].in[1] <== 44;
		and[9][i] = AND();
		and[9][i].a <== states[i][6];
		and[9][i].b <== eq[5][i].out;
		states[i+1][7] <== and[9][i].out;
		eq[6][i] = IsEqual();
		eq[6][i].in[0] <== in[i];
		eq[6][i].in[1] <== 32;
		and[10][i] = AND();
		and[10][i].a <== states[i][7];
		and[10][i].b <== eq[6][i].out;
		states[i+1][8] <== and[10][i].out;
		eq[7][i] = IsEqual();
		eq[7][i].in[0] <== in[i];
		eq[7][i].in[1] <== 48;
		eq[8][i] = IsEqual();
		eq[8][i].in[0] <== in[i];
		eq[8][i].in[1] <== 49;
		eq[9][i] = IsEqual();
		eq[9][i].in[0] <== in[i];
		eq[9][i].in[1] <== 50;
		eq[10][i] = IsEqual();
		eq[10][i].in[0] <== in[i];
		eq[10][i].in[1] <== 51;
		eq[11][i] = IsEqual();
		eq[11][i].in[0] <== in[i];
		eq[11][i].in[1] <== 52;
		eq[12][i] = IsEqual();
		eq[12][i].in[0] <== in[i];
		eq[12][i].in[1] <== 53;
		eq[13][i] = IsEqual();
		eq[13][i].in[0] <== in[i];
		eq[13][i].in[1] <== 54;
		eq[14][i] = IsEqual();
		eq[14][i].in[0] <== in[i];
		eq[14][i].in[1] <== 55;
		eq[15][i] = IsEqual();
		eq[15][i].in[0] <== in[i];
		eq[15][i].in[1] <== 56;
		eq[16][i] = IsEqual();
		eq[16][i].in[0] <== in[i];
		eq[16][i].in[1] <== 57;
		and[11][i] = AND();
		and[11][i].a <== states[i][8];
		multi_or[2][i] = MultiOR(10);
		multi_or[2][i].in[0] <== eq[7][i].out;
		multi_or[2][i].in[1] <== eq[8][i].out;
		multi_or[2][i].in[2] <== eq[9][i].out;
		multi_or[2][i].in[3] <== eq[10][i].out;
		multi_or[2][i].in[4] <== eq[11][i].out;
		multi_or[2][i].in[5] <== eq[12][i].out;
		multi_or[2][i].in[6] <== eq[13][i].out;
		multi_or[2][i].in[7] <== eq[14][i].out;
		multi_or[2][i].in[8] <== eq[15][i].out;
		multi_or[2][i].in[9] <== eq[16][i].out;
		and[11][i].b <== multi_or[2][i].out;
		states[i+1][9] <== and[11][i].out;
		and[12][i] = AND();
		and[12][i].a <== states[i][9];
		and[12][i].b <== eq[6][i].out;
		and[13][i] = AND();
		and[13][i].a <== states[i][11];
		and[13][i].b <== eq[6][i].out;
		multi_or[3][i] = MultiOR(2);
		multi_or[3][i].in[0] <== and[12][i].out;
		multi_or[3][i].in[1] <== and[13][i].out;
		states[i+1][10] <== multi_or[3][i].out;
		and[14][i] = AND();
		and[14][i].a <== states[i][9];
		and[14][i].b <== multi_or[2][i].out;
		states[i+1][11] <== and[14][i].out;
		and[15][i] = AND();
		and[15][i].a <== states[i][10];
		and[15][i].b <== multi_or[0][i].out;
		and[16][i] = AND();
		and[16][i].a <== states[i][12];
		and[16][i].b <== multi_or[0][i].out;
		multi_or[4][i] = MultiOR(2);
		multi_or[4][i].in[0] <== and[15][i].out;
		multi_or[4][i].in[1] <== and[16][i].out;
		states[i+1][12] <== multi_or[4][i].out;
		and[17][i] = AND();
		and[17][i].a <== states[i][12];
		and[17][i].b <== eq[6][i].out;
		states[i+1][13] <== and[17][i].out;
		and[18][i] = AND();
		and[18][i].a <== states[i][13];
		and[18][i].b <== multi_or[2][i].out;
		states[i+1][14] <== and[18][i].out;
		and[19][i] = AND();
		and[19][i].a <== states[i][14];
		and[19][i].b <== multi_or[2][i].out;
		states[i+1][15] <== and[19][i].out;
		and[20][i] = AND();
		and[20][i].a <== states[i][15];
		and[20][i].b <== multi_or[2][i].out;
		states[i+1][16] <== and[20][i].out;
		and[21][i] = AND();
		and[21][i].a <== states[i][16];
		and[21][i].b <== multi_or[2][i].out;
		states[i+1][17] <== and[21][i].out;
		and[22][i] = AND();
		and[22][i].a <== states[i][17];
		and[22][i].b <== eq[6][i].out;
		states[i+1][18] <== and[22][i].out;
		and[23][i] = AND();
		and[23][i].a <== states[i][18];
		and[23][i].b <== multi_or[2][i].out;
		states[i+1][19] <== and[23][i].out;
		and[24][i] = AND();
		and[24][i].a <== states[i][19];
		and[24][i].b <== multi_or[2][i].out;
		states[i+1][20] <== and[24][i].out;
		and[25][i] = AND();
		and[25][i].a <== states[i][20];
		and[25][i].b <== eq[4][i].out;
		states[i+1][21] <== and[25][i].out;
		and[26][i] = AND();
		and[26][i].a <== states[i][21];
		and[26][i].b <== multi_or[2][i].out;
		states[i+1][22] <== and[26][i].out;
		and[27][i] = AND();
		and[27][i].a <== states[i][22];
		and[27][i].b <== multi_or[2][i].out;
		states[i+1][23] <== and[27][i].out;
		and[28][i] = AND();
		and[28][i].a <== states[i][23];
		and[28][i].b <== eq[4][i].out;
		states[i+1][24] <== and[28][i].out;
		and[29][i] = AND();
		and[29][i].a <== states[i][24];
		and[29][i].b <== multi_or[2][i].out;
		states[i+1][25] <== and[29][i].out;
		and[30][i] = AND();
		and[30][i].a <== states[i][25];
		and[30][i].b <== multi_or[2][i].out;
		states[i+1][26] <== and[30][i].out;
		and[31][i] = AND();
		and[31][i].a <== states[i][26];
		and[31][i].b <== eq[6][i].out;
		states[i+1][27] <== and[31][i].out;
		eq[17][i] = IsEqual();
		eq[17][i].in[0] <== in[i];
		eq[17][i].in[1] <== 43;
		eq[18][i] = IsEqual();
		eq[18][i].in[0] <== in[i];
		eq[18][i].in[1] <== 45;
		and[32][i] = AND();
		and[32][i].a <== states[i][27];
		multi_or[5][i] = MultiOR(2);
		multi_or[5][i].in[0] <== eq[17][i].out;
		multi_or[5][i].in[1] <== eq[18][i].out;
		and[32][i].b <== multi_or[5][i].out;
		states[i+1][28] <== and[32][i].out;
		and[33][i] = AND();
		and[33][i].a <== states[i][28];
		and[33][i].b <== multi_or[2][i].out;
		states[i+1][29] <== and[33][i].out;
		and[34][i] = AND();
		and[34][i].a <== states[i][29];
		and[34][i].b <== multi_or[2][i].out;
		states[i+1][30] <== and[34][i].out;
		and[35][i] = AND();
		and[35][i].a <== states[i][30];
		and[35][i].b <== multi_or[2][i].out;
		states[i+1][31] <== and[35][i].out;
		and[36][i] = AND();
		and[36][i].a <== states[i][31];
		and[36][i].b <== multi_or[2][i].out;
		states[i+1][32] <== and[36][i].out;
		and[37][i] = AND();
		and[37][i].a <== states[i][32];
		and[37][i].b <== eq[6][i].out;
		states[i+1][33] <== and[37][i].out;
		eq[19][i] = IsEqual();
		eq[19][i].in[0] <== in[i];
		eq[19][i].in[1] <== 40;
		and[38][i] = AND();
		and[38][i].a <== states[i][33];
		and[38][i].b <== eq[19][i].out;
		states[i+1][34] <== and[38][i].out;
		eq[20][i] = IsEqual();
		eq[20][i].in[0] <== in[i];
		eq[20][i].in[1] <== 95;
		and[39][i] = AND();
		and[39][i].a <== states[i][34];
		multi_or[6][i] = MultiOR(13);
		multi_or[6][i].in[0] <== and[5][i].out;
		multi_or[6][i].in[1] <== and[6][i].out;
		multi_or[6][i].in[2] <== eq[7][i].out;
		multi_or[6][i].in[3] <== eq[8][i].out;
		multi_or[6][i].in[4] <== eq[9][i].out;
		multi_or[6][i].in[5] <== eq[10][i].out;
		multi_or[6][i].in[6] <== eq[11][i].out;
		multi_or[6][i].in[7] <== eq[12][i].out;
		multi_or[6][i].in[8] <== eq[13][i].out;
		multi_or[6][i].in[9] <== eq[14][i].out;
		multi_or[6][i].in[10] <== eq[15][i].out;
		multi_or[6][i].in[11] <== eq[16][i].out;
		multi_or[6][i].in[12] <== eq[20][i].out;
		and[39][i].b <== multi_or[6][i].out;
		and[40][i] = AND();
		and[40][i].a <== states[i][35];
		and[40][i].b <== multi_or[6][i].out;
		multi_or[7][i] = MultiOR(2);
		multi_or[7][i].in[0] <== and[39][i].out;
		multi_or[7][i].in[1] <== and[40][i].out;
		states[i+1][35] <== multi_or[7][i].out;
		eq[21][i] = IsEqual();
		eq[21][i].in[0] <== in[i];
		eq[21][i].in[1] <== 41;
		and[41][i] = AND();
		and[41][i].a <== states[i][35];
		and[41][i].b <== eq[21][i].out;
		states[i+1][36] <== and[41][i].out;
		from_zero_enabled[i] <== MultiNOR(36)([states_tmp[i+1][1], states[i+1][2], states[i+1][3], states[i+1][4], states[i+1][5], states[i+1][6], states[i+1][7], states[i+1][8], states[i+1][9], states[i+1][10], states[i+1][11], states[i+1][12], states[i+1][13], states[i+1][14], states[i+1][15], states[i+1][16], states[i+1][17], states[i+1][18], states[i+1][19], states[i+1][20], states[i+1][21], states[i+1][22], states[i+1][23], states[i+1][24], states[i+1][25], states[i+1][26], states[i+1][27], states[i+1][28], states[i+1][29], states[i+1][30], states[i+1][31], states[i+1][32], states[i+1][33], states[i+1][34], states[i+1][35], states[i+1][36]]);
		states[i+1][1] <== MultiOR(2)([states_tmp[i+1][1], from_zero_enabled[i] * and[0][i].out]);
		state_changed[i].in[0] <== states[i+1][1];
		state_changed[i].in[1] <== states[i+1][2];
		state_changed[i].in[2] <== states[i+1][3];
		state_changed[i].in[3] <== states[i+1][4];
		state_changed[i].in[4] <== states[i+1][5];
		state_changed[i].in[5] <== states[i+1][6];
		state_changed[i].in[6] <== states[i+1][7];
		state_changed[i].in[7] <== states[i+1][8];
		state_changed[i].in[8] <== states[i+1][9];
		state_changed[i].in[9] <== states[i+1][10];
		state_changed[i].in[10] <== states[i+1][11];
		state_changed[i].in[11] <== states[i+1][12];
		state_changed[i].in[12] <== states[i+1][13];
		state_changed[i].in[13] <== states[i+1][14];
		state_changed[i].in[14] <== states[i+1][15];
		state_changed[i].in[15] <== states[i+1][16];
		state_changed[i].in[16] <== states[i+1][17];
		state_changed[i].in[17] <== states[i+1][18];
		state_changed[i].in[18] <== states[i+1][19];
		state_changed[i].in[19] <== states[i+1][20];
		state_changed[i].in[20] <== states[i+1][21];
		state_changed[i].in[21] <== states[i+1][22];
		state_changed[i].in[22] <== states[i+1][23];
		state_changed[i].in[23] <== states[i+1][24];
		state_changed[i].in[24] <== states[i+1][25];
		state_changed[i].in[25] <== states[i+1][26];
		state_changed[i].in[26] <== states[i+1][27];
		state_changed[i].in[27] <== states[i+1][28];
		state_changed[i].in[28] <== states[i+1][29];
		state_changed[i].in[29] <== states[i+1][30];
		state_changed[i].in[30] <== states[i+1][31];
		state_changed[i].in[31] <== states[i+1][32];
		state_changed[i].in[32] <== states[i+1][33];
		state_changed[i].in[33] <== states[i+1][34];
		state_changed[i].in[34] <== states[i+1][35];
		state_changed[i].in[35] <== states[i+1][36];
	}

	component is_accepted = MultiOR(num_bytes+1);
	for (var i = 0; i <= num_bytes; i++) {
		is_accepted.in[i] <== states[i][36];
	}
	out <== is_accepted.out;
	signal is_consecutive[msg_bytes+1][3];
	is_consecutive[msg_bytes][2] <== 0;
	for (var i = 0; i < msg_bytes; i++) {
		is_consecutive[msg_bytes-1-i][0] <== states[num_bytes-i][36] * (1 - is_consecutive[msg_bytes-i][2]) + is_consecutive[msg_bytes-i][2];
		is_consecutive[msg_bytes-1-i][1] <== state_changed[msg_bytes-i].out * is_consecutive[msg_bytes-1-i][0];
		is_consecutive[msg_bytes-1-i][2] <== ORAnd()([(1 - from_zero_enabled[msg_bytes-i+1]), states[num_bytes-i][36], is_consecutive[msg_bytes-1-i][1]]);
	}
	// substrings calculated: [{(5, 6), (6, 6), (6, 7), (7, 8), (8, 9), (9, 10), (9, 11), (10, 12), (11, 10), (12, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 35), (35, 36)}]
	signal prev_states0[35][msg_bytes];
	signal is_substr0[msg_bytes];
	signal is_reveal0[msg_bytes];
	signal output reveal0[msg_bytes];
	for (var i = 0; i < msg_bytes; i++) {
		 // the 0-th substring transitions: [(5, 6), (6, 6), (6, 7), (7, 8), (8, 9), (9, 10), (9, 11), (10, 12), (11, 10), (12, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 35), (35, 36)]
		prev_states0[0][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][5];
		prev_states0[1][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][6];
		prev_states0[2][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][6];
		prev_states0[3][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][7];
		prev_states0[4][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][8];
		prev_states0[5][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][9];
		prev_states0[6][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][9];
		prev_states0[7][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][10];
		prev_states0[8][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][11];
		prev_states0[9][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][12];
		prev_states0[10][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][12];
		prev_states0[11][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][13];
		prev_states0[12][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][14];
		prev_states0[13][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][15];
		prev_states0[14][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][16];
		prev_states0[15][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][17];
		prev_states0[16][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][18];
		prev_states0[17][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][19];
		prev_states0[18][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][20];
		prev_states0[19][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][21];
		prev_states0[20][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][22];
		prev_states0[21][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][23];
		prev_states0[22][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][24];
		prev_states0[23][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][25];
		prev_states0[24][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][26];
		prev_states0[25][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][27];
		prev_states0[26][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][28];
		prev_states0[27][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][29];
		prev_states0[28][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][30];
		prev_states0[29][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][31];
		prev_states0[30][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][32];
		prev_states0[31][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][33];
		prev_states0[32][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][34];
		prev_states0[33][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][35];
		prev_states0[34][i] <== (1 - from_zero_enabled[i+1]) * states[i+1][35];
		is_substr0[i] <== MultiOR(35)([prev_states0[0][i] * states[i+2][6], prev_states0[1][i] * states[i+2][6], prev_states0[2][i] * states[i+2][7], prev_states0[3][i] * states[i+2][8], prev_states0[4][i] * states[i+2][9], prev_states0[5][i] * states[i+2][10], prev_states0[6][i] * states[i+2][11], prev_states0[7][i] * states[i+2][12], prev_states0[8][i] * states[i+2][10], prev_states0[9][i] * states[i+2][12], prev_states0[10][i] * states[i+2][13], prev_states0[11][i] * states[i+2][14], prev_states0[12][i] * states[i+2][15], prev_states0[13][i] * states[i+2][16], prev_states0[14][i] * states[i+2][17], prev_states0[15][i] * states[i+2][18], prev_states0[16][i] * states[i+2][19], prev_states0[17][i] * states[i+2][20], prev_states0[18][i] * states[i+2][21], prev_states0[19][i] * states[i+2][22], prev_states0[20][i] * states[i+2][23], prev_states0[21][i] * states[i+2][24], prev_states0[22][i] * states[i+2][25], prev_states0[23][i] * states[i+2][26], prev_states0[24][i] * states[i+2][27], prev_states0[25][i] * states[i+2][28], prev_states0[26][i] * states[i+2][29], prev_states0[27][i] * states[i+2][30], prev_states0[28][i] * states[i+2][31], prev_states0[29][i] * states[i+2][32], prev_states0[30][i] * states[i+2][33], prev_states0[31][i] * states[i+2][34], prev_states0[32][i] * states[i+2][35], prev_states0[33][i] * states[i+2][35], prev_states0[34][i] * states[i+2][36]]);
		is_reveal0[i] <== MultiAND(3)([out, is_substr0[i], is_consecutive[i][2]]);
		reveal0[i] <== in[i+1] * is_reveal0[i];
	}
}